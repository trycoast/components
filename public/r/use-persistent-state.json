{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-persistent-state",
  "type": "registry:hook",
  "title": "Persistent State",
  "description": "A hook to manage persistent state.",
  "dependencies": [
    "zustand"
  ],
  "files": [
    {
      "path": "registry/default/hooks/use-persistent-state.ts",
      "content": "import { create } from \"zustand\";\r\nimport { persist, PersistStorage } from \"zustand/middleware\";\r\n\r\ninterface PersistentState {\r\n  [key: string]: any;\r\n  setItem: (key: string, value: any) => void;\r\n}\r\n\r\nconst storage: PersistStorage<PersistentState> = {\r\n  getItem: (name) => {\r\n    const item = localStorage.getItem(name);\r\n    return item ? JSON.parse(item) : null;\r\n  },\r\n  setItem: (name, value) => {\r\n    localStorage.setItem(name, JSON.stringify(value));\r\n  },\r\n  removeItem: (name) => {\r\n    localStorage.removeItem(name);\r\n  },\r\n};\r\n\r\nexport const usePersistentStore = create<PersistentState>()(\r\n  persist(\r\n    (set) => ({\r\n      setItem: (key, value) => set((state) => ({ ...state, [key]: value })),\r\n    }),\r\n    {\r\n      name: \"react.store.persist\",\r\n      storage: storage,\r\n    }\r\n  )\r\n);\r\n\r\nexport function usePersistentState<T>(key: string, initialValue: T): [T, (value: T) => void] {\r\n  const store = usePersistentStore();\r\n  const value = store[key] ?? initialValue;\r\n  const setValue = (newValue: T) => store.setItem(key, newValue);\r\n  return [value, setValue];\r\n}\r\n\r\n// V 0.1\r\n\r\n// import { useState, useEffect } from \"react\";\r\n\r\n// export default function usePersistentState<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {\r\n//   const getInitialValue = () => {\r\n//     if (typeof window === \"undefined\") return initialValue;\r\n//     try {\r\n//       const storedValue = localStorage.getItem(key);\r\n//       return storedValue ? JSON.parse(storedValue) : initialValue;\r\n//     } catch (error) {\r\n//       console.error(`Error reading persistent key \"${key}\":`, error);\r\n//       return initialValue;\r\n//     }\r\n//   };\r\n\r\n//   const [value, setValue] = useState<T>(getInitialValue);\r\n\r\n//   useEffect(() => {\r\n//     try {\r\n//       localStorage.setItem(key, JSON.stringify(value));\r\n//     } catch (error) {\r\n//       console.error(`Error writing persistent key \"${key}\":`, error);\r\n//     }\r\n//   }, [key, value]);\r\n\r\n//   return [value, setValue];\r\n// }\r\n",
      "type": "registry:hook"
    }
  ]
}