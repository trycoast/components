{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-persistent-state",
  "type": "registry:hook",
  "title": "Persistent State",
  "description": "A hook to manage persistent state.",
  "dependencies": [
    "zustand"
  ],
  "files": [
    {
      "path": "registry/default/hooks/use-persistent-state.ts",
      "content": "import { create } from \"zustand\";\nimport { persist, type PersistStorage } from \"zustand/middleware\";\n\ninterface PersistentState {\n  [key: string]: any;\n  setItem: (key: string, value: any) => void;\n}\n\nconst storage: PersistStorage<PersistentState> = {\n  getItem: (name) => {\n    const item = localStorage.getItem(name);\n    return item ? JSON.parse(item) : null;\n  },\n  setItem: (name, value) => {\n    localStorage.setItem(name, JSON.stringify(value));\n  },\n  removeItem: (name) => {\n    localStorage.removeItem(name);\n  },\n};\n\nexport const usePersistentStore = create<PersistentState>()(\n  persist(\n    (set) => ({\n      setItem: (key, value) => set((state) => ({ ...state, [key]: value })),\n    }),\n    {\n      name: \"react.store.persist\",\n      storage: storage,\n    }\n  )\n);\n\nexport function usePersistentState<T>(key: string, initialValue: T): [T, (value: T) => void] {\n  const store = usePersistentStore();\n  const value = store[key] ?? initialValue;\n  const setValue = (newValue: T) => store.setItem(key, newValue);\n  return [value, setValue];\n}\n",
      "type": "registry:hook"
    }
  ]
}