{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:ui",
  "title": "Data Table",
  "description": "A tanstack-based data table.",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "dropdown-menu",
    "input",
    "label",
    "select",
    "table"
  ],
  "files": [
    {
      "path": "registry/default/ui/data-table.tsx",
      "content": "import { ContextMenu, ContextMenuTrigger, ContextMenuContent, ContextMenuItem } from \"@/components/ui/context-menu\";\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Group } from \"@/registry/default/ui/group\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { ChevronFirst, ChevronLast, ChevronLeft, ChevronRight, LoaderCircleIcon, SearchIcon, Settings2, TriangleIcon } from \"lucide-react\";\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  type SortingState,\n  type VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n  type Table as ReactTable,\n} from \"@tanstack/react-table\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst variants = cva(\"\", {\n  variants: {\n    variant: {\n      default: \"\",\n      compact: \"p-1\",\n    },\n    size: {\n      default: \"\",\n      xs: \"text-xs\",\n      sm: \"text-sm\",\n    },\n  },\n  defaultVariants: {\n    size: \"sm\",\n    variant: \"default\",\n  },\n});\n\ninterface TableContextValue<TData> {\n  table: ReactTable<TData>;\n  globalFilter: string;\n  config?: Config;\n  setGlobalFilter: (value: string) => void;\n}\n\nconst TableContext = React.createContext<TableContextValue<any> | undefined>(undefined);\n\nconst useTableContext = <TData,>(): TableContextValue<TData> => {\n  const context = React.useContext(TableContext);\n  if (!context) {\n    throw new Error(\"useTableContext must be used within a TableProvider\");\n  }\n  return context;\n};\n\nexport type RowMenuItem<T = any> = {\n  label: React.ReactNode;\n  onSelect: (row: T) => void;\n  disabled?: boolean;\n};\n\nexport interface Config {\n  enableRowSelection?: boolean;\n  initialPageSize?: number;\n  initialSortBy?: string;\n  initialColumnVisibility?: VisibilityState;\n  contextMenu?: (row: any) => RowMenuItem[] | null; // return null/[] to skip\n  onLoadMore?: () => void; // <- explicit callback\n  isLoadingMore?: boolean; // <- to show spinner\n  hasMore?: boolean; // <- disable button if false\n}\n\ninterface Meta {\n  disableDisplay?: boolean;\n  enableSort?: boolean;\n  justify?: \"start\" | \"center\" | \"end\";\n  className?: string;\n}\n\nexport type ExtendedColumnDef<TData, TValue> = ColumnDef<TData, TValue> & {\n  meta?: Meta;\n};\n\nfunction Root<TData, TValue>({\n  columns,\n  data,\n  config,\n  children,\n  onRowSelectionChange,\n  ...props\n}: {\n  key?: string;\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n  config?: Config;\n  className?: string;\n  children?: React.ReactNode;\n  onRowSelectionChange?: (selectedRows: TData[]) => void;\n}) {\n  const [sorting, setSorting] = React.useState<SortingState>(config?.initialSortBy ? [{ id: config.initialSortBy, desc: true }] : []);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>(() => {\n    if (props.key) {\n      const storedVisibility = localStorage.getItem(`${props.key}-columns`);\n      return storedVisibility ? JSON.parse(storedVisibility) : {};\n    }\n\n    if (config?.initialColumnVisibility) {\n      return config.initialColumnVisibility;\n    }\n\n    return {};\n  });\n\n  const [globalFilter, setGlobalFilter] = React.useState<string>(\"\");\n\n  React.useEffect(() => {\n    if (props.key) {\n      localStorage.setItem(`${props.key}-columns`, JSON.stringify(columnVisibility));\n    }\n  }, [columnVisibility]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      columnFilters,\n      globalFilter,\n      // ...(config?.onLoadMore ? { pagination: {} } : {}),\n      // ...(config?.onLoadMore ? { pagination: undefined } : {}),\n    },\n    initialState: {\n      pagination: {\n        pageSize: config?.initialPageSize || 20,\n      },\n    },\n    enableRowSelection: true,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n    // getPaginationRowModel: getPaginationRowModel(),\n    ...(config?.onLoadMore ? {} : { getPaginationRowModel: getPaginationRowModel() }),\n  });\n\n  React.useEffect(() => {\n    if (onRowSelectionChange) {\n      requestIdleCallback(() => {\n        onRowSelectionChange(table.getSelectedRowModel().rows.map((row) => row.original));\n      });\n    }\n  }, [table.getState().rowSelection, onRowSelectionChange]);\n\n  return (\n    <TableContext.Provider value={{ table, config, globalFilter, setGlobalFilter }}>\n      <div className={cn(\"flex flex-col flex-1 overflow-hidden\", props.className)}>{children}</div>\n    </TableContext.Provider>\n  );\n}\n\nfunction useDebounce(value: string, delay: number) {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nfunction Toolbar({ className, children, search = true }: { className?: string; children?: React.ReactNode; search?: boolean }) {\n  const { table, globalFilter, setGlobalFilter } = useTableContext();\n  const [inputValue, setInputValue] = React.useState(globalFilter);\n  const [open, setOpen] = React.useState(false);\n\n  // Use a debounced value to update global filter\n  const debouncedValue = useDebounce(inputValue, 300);\n\n  React.useEffect(() => {\n    setGlobalFilter(debouncedValue);\n  }, [debouncedValue, setGlobalFilter]);\n\n  const handleInputChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  }, []);\n\n  return (\n    <div className={cn(\"flex justify-between mb-1\", className)}>\n      <div className=\"flex items-center w-full gap-1\">\n        <div className=\"flex items-center\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"\" size=\"icon\">\n                <Settings2 size={15} />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {table\n                .getAllColumns()\n                .filter((column) => column.getCanHide())\n                .map((column) => (\n                  <DropdownMenuCheckboxItem key={column.id} checked={column.getIsVisible()} onCheckedChange={(value) => column.toggleVisibility(!!value)}>\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {/* {search && <Input placeholder=\"Search...\" className=\"max-w-xs\" value={inputValue} onChange={handleInputChange} />} */}\n        {search && (\n          <div className=\"flex gap-0\">\n            <Button size=\"icon\" variant=\"outline\" onClick={() => setOpen(true)} className={cn(open && \"rounded-r-none\")}>\n              <SearchIcon />\n            </Button>\n\n            <div className={cn(\"overflow-hidden transition-[max-width] duration-300 ease-in-out\", open ? \"max-w-xs\" : \"max-w-0\")}>\n              {open && (\n                <Input\n                  value={inputValue}\n                  autoFocus={open}\n                  onBlur={() => {\n                    if (!inputValue) setOpen(false);\n                  }}\n                  onChange={handleInputChange}\n                  className=\"w-72 focus-visible:border-ring-0 focus-visible:ring-ring/0 focus-visible:ring-[0px] rounded-l-none\"\n                />\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n      <div>{children}</div>\n    </div>\n  );\n}\n\nfunction Pagination({ className, variant = \"default\" }: { className?: string; variant: string }) {\n  const { table } = useTableContext();\n\n  if (variant === \"default\") {\n    return (\n      <div className={cn(\"flex items-center justify-between w-full gap-4 mt-1\", className)}>\n        <div className=\"flex text-sm text-muted-foreground\">\n          {table.getFilteredSelectedRowModel().rows.length} of {new Intl.NumberFormat(\"en-US\").format(table.getFilteredRowModel().rows.length)} row(s) selected.\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"items-center hidden gap-2 lg:flex\">\n            <Label className=\"text-sm font-normal\">Rows per page</Label>\n            <Select value={`${table.getState().pagination.pageSize}`} onValueChange={(value) => table.setPageSize(Number(value))}>\n              <SelectTrigger className=\"w-20\" size=\"sm\">\n                <SelectValue placeholder={table.getState().pagination.pageSize.toString()} />\n              </SelectTrigger>\n              <SelectContent side=\"top\">\n                {[10, 20, 30, 40, 50].map((pageSize) => (\n                  <SelectItem key={pageSize} value={`${pageSize}`}>\n                    {pageSize}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <Group>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => table.setPageIndex(0)} disabled={!table.getCanPreviousPage()}>\n              <ChevronFirst size={15} />\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>\n              <ChevronLeft size={15} />\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"items-center w-20 text-xs font-semibold\" disabled>\n              Page {table.getState().pagination.pageIndex + 1}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>\n              <ChevronRight size={15} />\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => table.setPageIndex(table.getPageCount() - 1)} disabled={!table.getCanNextPage()}>\n              <ChevronLast size={15} />\n            </Button>\n          </Group>\n        </div>\n      </div>\n    );\n  }\n\n  if (variant === \"minimal\") {\n    const { pageIndex, pageSize } = table.getState().pagination;\n    const total = table.getFilteredRowModel().rows.length;\n\n    const start = total === 0 ? 0 : pageIndex * pageSize + 1;\n    const end = Math.min((pageIndex + 1) * pageSize, total);\n\n    const formatter = new Intl.NumberFormat();\n\n    return (\n      <div className={cn(\"flex items-center justify-between w-full gap-4 mt-1\", className)}>\n        <span className=\"text-xs text-foreground/50\">\n          {formatter.format(start)}–{formatter.format(end)} of {formatter.format(total)}\n        </span>\n        <Group>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>\n            <ChevronLeft size={15} />\n          </Button>\n          {/* <Button variant=\"outline\" size=\"sm\" className=\"items-center w-20 text-xs font-semibold\" disabled>\n          {formatter.format(start)}–{formatter.format(end)} of {formatter.format(total)}\n        </Button> */}\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>\n            <ChevronRight size={15} />\n          </Button>\n        </Group>\n      </div>\n    );\n  }\n}\n\nfunction Content({ children }: { children?: React.ReactNode }) {\n  return (\n    <div data-slot=\"table-container\" className=\"h-full overflow-y-auto scrollbar-thin scrollbar-thumb-foreground scrollbar-track-background\">\n      <table data-slot=\"table\" className=\"w-full caption-bottom\">\n        {children}\n      </table>\n    </div>\n  );\n}\n\nfunction Header({\n  size,\n  className,\n  variant,\n}: {\n  variant?: VariantProps<typeof variants>[\"variant\"];\n  size?: VariantProps<typeof variants>[\"size\"];\n  className?: string;\n}) {\n  const { table, config } = useTableContext();\n\n  return (\n    <TableHeader className={cn(\"sticky top-0\", className)}>\n      {table.getHeaderGroups().map((headerGroup) => (\n        <TableRow key={headerGroup.id}>\n          {config?.enableRowSelection && (\n            <TableHead className={cn(variants({ variant, size }))}>\n              <div className=\"flex items-center justify-center\">\n                <Checkbox\n                  checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && \"indeterminate\")}\n                  onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n                  aria-label=\"Select all\"\n                />\n              </div>\n            </TableHead>\n          )}\n          {headerGroup.headers.map((header) => {\n            const column = header.column;\n            const columnDef = header.column.columnDef as ExtendedColumnDef<unknown, unknown>;\n\n            if (columnDef.meta?.disableDisplay) {\n              return null;\n            }\n\n            const justify = columnDef.meta?.justify || \"start\";\n\n            if (columnDef.meta?.enableSort) {\n              const isSortedAsc = column.getIsSorted() === \"asc\";\n              const isSortedDesc = column.getIsSorted() === \"desc\";\n\n              return (\n                <TableHead className={cn(variants({ variant, size }))} key={header.id} onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}>\n                  <div\n                    className={cn(\n                      \"cursor-pointer flex gap-1.5 items-center\",\n                      justify === \"end\" && \"flex-row-reverse\",\n                      justify === \"center\" && \"justify-center\",\n                      variants({ variant, size })\n                    )}\n                  >\n                    {flexRender(columnDef.header, header.getContext())}\n                    <div className=\"flex flex-col gap-[1.5px]\">\n                      <TriangleIcon className={cn(\"w-1.5 h-1.5 text-foreground/25\", isSortedAsc && \"text-foreground/100\")} />\n                      <TriangleIcon className={cn(\"w-1.5 h-1.5 text-foreground/25 rotate-180\", isSortedDesc && \"text-foreground/100\")} />\n                    </div>\n                  </div>\n                </TableHead>\n              );\n            }\n\n            return (\n              <TableHead className={cn(variants({ variant, size }))} key={header.id}>\n                <div className={cn(\"flex gap-1.5 items-center\", justify === \"end\" && \"flex-row-reverse\", justify === \"center\" && \"justify-center\")}>\n                  {flexRender(columnDef.header, header.getContext())}\n                </div>\n              </TableHead>\n            );\n          })}\n        </TableRow>\n      ))}\n    </TableHeader>\n  );\n}\n\nfunction Body({\n  size,\n  variant,\n}: {\n  variant?: VariantProps<typeof variants>[\"variant\"];\n  size?: VariantProps<typeof variants>[\"size\"];\n} = {}) {\n  const { table, config } = useTableContext();\n\n  return (\n    <TableBody>\n      {table.getRowModel().rows.length > 0 ? (\n        table.getRowModel().rows.map((row) => {\n          const cells = (\n            <>\n              {config?.enableRowSelection && (\n                <TableCell className={cn(variants({ variant, size }))}>\n                  <div className=\"flex items-center justify-center\">\n                    <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label=\"Select row\" />\n                  </div>\n                </TableCell>\n              )}\n\n              {row.getVisibleCells().map((cell) => {\n                const columnDef = cell.column.columnDef as ExtendedColumnDef<unknown, unknown>;\n                if (columnDef.meta?.disableDisplay) return null;\n\n                const justify = columnDef.meta?.justify || \"start\";\n                const className = columnDef.meta?.className || \"\";\n\n                return (\n                  <TableCell\n                    key={cell.id}\n                    className={cn(justify === \"end\" && \"text-right\", justify === \"center\" && \"text-center\", variants({ variant, size }), className)}\n                  >\n                    {flexRender(columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </>\n          );\n\n          // if no config or config returns no items, render as usual\n          const items = config?.contextMenu?.(row.original) ?? null;\n          if (!items || items.length === 0) {\n            return (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && \"selected\"}\n                className=\"border-0 hover:bg-foreground/5 data-[state=selected]:bg-foreground/5\"\n              >\n                {cells}\n              </TableRow>\n            );\n          }\n\n          // otherwise, wrap this row with a ContextMenu\n          return (\n            <ContextMenu\n              key={row.id}\n              onOpenChange={(open) => {\n                if (open) {\n                  // highlight while the context menu is open\n                  row.toggleSelected(true);\n                } else {\n                  // remove highlight after the menu closes\n                  row.toggleSelected(false);\n                }\n              }}\n            >\n              <ContextMenuTrigger asChild>\n                <TableRow data-state={row.getIsSelected() && \"selected\"} className=\"border-0 hover:bg-foreground/5 data-[state=selected]:bg-foreground/5\">\n                  {cells}\n                </TableRow>\n              </ContextMenuTrigger>\n              <ContextMenuContent align=\"start\">\n                {items.map((it, i) => (\n                  <ContextMenuItem key={i} disabled={it.disabled} onSelect={() => it.onSelect(row.original)}>\n                    {it.label}\n                  </ContextMenuItem>\n                ))}\n              </ContextMenuContent>\n            </ContextMenu>\n          );\n        })\n      ) : (\n        <TableRow>\n          <TableCell colSpan={table.getVisibleLeafColumns().length} className={cn(\"text-center h-24\", variants({ variant, size }))}>\n            No results.\n          </TableCell>\n        </TableRow>\n      )}\n\n      {config?.onLoadMore && (\n        <TableRow>\n          <TableCell\n            colSpan={table.getVisibleLeafColumns().length + (config?.enableRowSelection ? 1 : 0)}\n            className={cn(\"text-center\", variants({ variant, size }))}\n          >\n            <Button variant=\"outline\" size=\"sm\" onClick={() => config?.onLoadMore?.()} disabled={config.isLoadingMore || !config.hasMore}>\n              {config.isLoadingMore ? (\n                <div className=\"flex items-center gap-1\">\n                  <LoaderCircleIcon size={15} className=\"animate-spin\" /> Loading\n                </div>\n              ) : config.hasMore ? (\n                \"Load more\"\n              ) : (\n                \"No more data\"\n              )}\n            </Button>\n          </TableCell>\n        </TableRow>\n      )}\n    </TableBody>\n  );\n}\n\nexport const DataTable = {\n  Root: Root,\n  Toolbar,\n  Pagination,\n  Content,\n  Header,\n  Body,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/ui/group.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport React from \"react\";\n\nexport interface GroupProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst Group = React.forwardRef<HTMLDivElement, GroupProps>(\n  ({ className, children, ...props }, ref) => {\n    const childrenArray = React.Children.toArray(children);\n\n    return (\n      <div className={cn(\"inline-flex\", className)} ref={ref} {...props}>\n        {React.Children.map(childrenArray, (child, index) => {\n          if (React.isValidElement(child)) {\n            return React.cloneElement(child, {\n              className: cn(\n                child.props.className,\n                \"rounded-none border-r-0\",\n                index === 0 && \"rounded-l-md\",\n                index === childrenArray.length - 1 && \"rounded-r-md border-r\",\n                \"first:rounded-l-md last:rounded-r-md\"\n              ),\n            });\n          }\n          return child;\n        })}\n      </div>\n    );\n  }\n);\nGroup.displayName = \"Group\";\n\nexport { Group };\n",
      "type": "registry:ui"
    }
  ]
}