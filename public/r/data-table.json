{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:ui",
  "title": "Data Table",
  "description": "A tanstack-based data table.",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "dropdown-menu",
    "input",
    "label",
    "select",
    "table"
  ],
  "files": [
    {
      "path": "registry/default/ui/data-table.tsx",
      "content": "import * as React from \"react\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\r\nimport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from \"@/registry/default/ui/dropdown-menu\";\r\nimport { Group } from \"@/registry/default/ui/group\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Label } from \"@/registry/default/ui/label\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/registry/default/ui/select\";\r\nimport { TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/registry/default/ui/table\";\r\nimport { ChevronFirst, ChevronLast, ChevronLeft, ChevronRight, Settings2 } from \"lucide-react\";\r\nimport {\r\n  type ColumnDef,\r\n  type ColumnFiltersState,\r\n  type SortingState,\r\n  type VisibilityState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFacetedRowModel,\r\n  getFacetedUniqueValues,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  type Table as ReactTable,\r\n} from \"@tanstack/react-table\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface TableContextValue<TData> {\r\n  table: ReactTable<TData>;\r\n  globalFilter: string;\r\n  config?: Config;\r\n  setGlobalFilter: (value: string) => void;\r\n}\r\n\r\nconst TableContext = React.createContext<TableContextValue<any> | undefined>(undefined);\r\n\r\nconst useTableContext = <TData,>(): TableContextValue<TData> => {\r\n  const context = React.useContext(TableContext);\r\n  if (!context) {\r\n    throw new Error(\"useTableContext must be used within a TableProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport interface Config {\r\n  enableRowSelection?: boolean;\r\n  initialPageSize?: number;\r\n}\r\n\r\ninterface Meta {\r\n  disableDisplay?: boolean;\r\n}\r\n\r\nexport type ExtendedColumnDef<TData, TValue> = ColumnDef<TData, TValue> & {\r\n  meta?: Meta;\r\n};\r\n\r\nfunction Root<TData, TValue>({\r\n  columns,\r\n  data,\r\n  config,\r\n  children,\r\n  ...props\r\n}: {\r\n  key?: string;\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n  config?: Config;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n}) {\r\n  const [sorting, setSorting] = React.useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>(() =>\r\n    props.key ? JSON.parse(localStorage.getItem(`${props.key}-columns`) || \"{}\") : {}\r\n  );\r\n  const [rowSelection, setRowSelection] = React.useState({});\r\n  const [globalFilter, setGlobalFilter] = React.useState<string>(\"\");\r\n\r\n  React.useEffect(() => {\r\n    if (props.key) {\r\n      localStorage.setItem(`${props.key}-columns`, JSON.stringify(columnVisibility));\r\n    }\r\n  }, [columnVisibility]);\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    state: {\r\n      sorting,\r\n      columnVisibility,\r\n      rowSelection,\r\n      columnFilters,\r\n      globalFilter,\r\n    },\r\n    initialState: {\r\n      pagination: {\r\n        pageSize: config?.initialPageSize || 20,\r\n      },\r\n    },\r\n    enableRowSelection: true,\r\n    onRowSelectionChange: setRowSelection,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFacetedRowModel: getFacetedRowModel(),\r\n    getFacetedUniqueValues: getFacetedUniqueValues(),\r\n  });\r\n\r\n  return (\r\n    <TableContext.Provider value={{ table, config, globalFilter, setGlobalFilter }}>\r\n      <div className={cn(\"flex flex-col flex-1 overflow-hidden\", props.className)}>{children}</div>\r\n    </TableContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useDebounce(value: string, delay: number) {\r\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\r\n\r\n  React.useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\nfunction Toolbar({ className, children, search = true }: { className?: string; children?: React.ReactNode; search?: boolean }) {\r\n  const { table, globalFilter, setGlobalFilter } = useTableContext();\r\n  const [inputValue, setInputValue] = React.useState(globalFilter);\r\n\r\n  // Use a debounced value to update global filter\r\n  const debouncedValue = useDebounce(inputValue, 300);\r\n\r\n  React.useEffect(() => {\r\n    setGlobalFilter(debouncedValue);\r\n  }, [debouncedValue, setGlobalFilter]);\r\n\r\n  const handleInputChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(event.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={cn(\"flex justify-between\", className)}>\r\n      <div className=\"flex items-center w-full gap-1 mb-1\">\r\n        <div className=\"flex items-center\">\r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n              <Button variant=\"outline\" className=\"\" size=\"icon\">\r\n                <Settings2 size={15} />\r\n              </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent align=\"end\">\r\n              {table\r\n                .getAllColumns()\r\n                .filter((column) => column.getCanHide())\r\n                .map((column) => (\r\n                  <DropdownMenuCheckboxItem key={column.id} checked={column.getIsVisible()} onCheckedChange={(value) => column.toggleVisibility(!!value)}>\r\n                    {column.id}\r\n                  </DropdownMenuCheckboxItem>\r\n                ))}\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n        </div>\r\n        {search && <Input placeholder=\"Search...\" className=\"max-w-xs\" value={inputValue} onChange={handleInputChange} />}\r\n      </div>\r\n      <div>{children}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Pagination({ className }: { className?: string }) {\r\n  const { table } = useTableContext();\r\n\r\n  return (\r\n    <div className={cn(\"flex items-center justify-between w-full gap-4 my-1\", className)}>\r\n      <div className=\"flex text-sm text-muted-foreground\">\r\n        {table.getFilteredSelectedRowModel().rows.length} of {new Intl.NumberFormat(\"en-US\").format(table.getFilteredRowModel().rows.length)} row(s) selected.\r\n      </div>\r\n      <div className=\"flex items-center gap-4\">\r\n        <div className=\"hidden items-center gap-2 lg:flex\">\r\n          <Label className=\"text-sm font-normal\">Rows per page</Label>\r\n          <Select value={`${table.getState().pagination.pageSize}`} onValueChange={(value) => table.setPageSize(Number(value))}>\r\n            <SelectTrigger className=\"w-20\" size=\"sm\">\r\n              <SelectValue placeholder={table.getState().pagination.pageSize.toString()} />\r\n            </SelectTrigger>\r\n            <SelectContent side=\"top\">\r\n              {[10, 20, 30, 40, 50].map((pageSize) => (\r\n                <SelectItem key={pageSize} value={`${pageSize}`}>\r\n                  {pageSize}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <Group>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.setPageIndex(0)} disabled={!table.getCanPreviousPage()}>\r\n            <ChevronFirst size={15} />\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>\r\n            <ChevronLeft size={15} />\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" className=\"items-center w-20 text-xs font-semibold\" disabled>\r\n            Page {table.getState().pagination.pageIndex + 1}\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>\r\n            <ChevronRight size={15} />\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.setPageIndex(table.getPageCount() - 1)} disabled={!table.getCanNextPage()}>\r\n            <ChevronLast size={15} />\r\n          </Button>\r\n        </Group>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Content({ children }: { children?: React.ReactNode }) {\r\n  return (\r\n    <div data-slot=\"table-container\" className=\"h-full overflow-y-auto\">\r\n      <table data-slot=\"table\" className=\"w-full caption-bottom text-sm\">\r\n        {children}\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Header({ className }: { className?: String }) {\r\n  const { table, config } = useTableContext();\r\n\r\n  return (\r\n    <TableHeader className={cn(\"sticky top-0\", className)}>\r\n      {table.getHeaderGroups().map((headerGroup) => (\r\n        <TableRow key={headerGroup.id}>\r\n          {config?.enableRowSelection && (\r\n            <TableHead>\r\n              <div className=\"flex items-center justify-center\">\r\n                <Checkbox\r\n                  checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && \"indeterminate\")}\r\n                  onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n                  aria-label=\"Select all\"\r\n                />\r\n              </div>\r\n            </TableHead>\r\n          )}\r\n          {headerGroup.headers.map((header) => {\r\n            const columnDef = header.column.columnDef as ExtendedColumnDef<unknown, unknown>;\r\n\r\n            if (columnDef.meta?.disableDisplay) {\r\n              return null;\r\n            }\r\n            return (\r\n              <TableHead key={header.id} className={header.isPlaceholder ? \"hidden\" : \"\"}>\r\n                {header.isPlaceholder ? null : flexRender(columnDef.header, header.getContext())}\r\n              </TableHead>\r\n            );\r\n          })}\r\n        </TableRow>\r\n      ))}\r\n    </TableHeader>\r\n  );\r\n}\r\n\r\nfunction Body() {\r\n  const { table, config } = useTableContext();\r\n\r\n  return (\r\n    <TableBody>\r\n      {table.getRowModel().rows.length > 0 ? (\r\n        table.getRowModel().rows.map((row) => (\r\n          <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\r\n            {config?.enableRowSelection && (\r\n              <TableCell>\r\n                <div className=\"flex items-center justify-center\">\r\n                  <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label=\"Select row\" />\r\n                </div>\r\n              </TableCell>\r\n            )}\r\n            {row.getVisibleCells().map((cell) => {\r\n              const columnDef = cell.column.columnDef as ExtendedColumnDef<unknown, unknown>;\r\n\r\n              if (columnDef.meta?.disableDisplay) {\r\n                return null;\r\n              }\r\n              return <TableCell key={cell.id}>{flexRender(columnDef.cell, cell.getContext())}</TableCell>;\r\n            })}\r\n          </TableRow>\r\n        ))\r\n      ) : (\r\n        <TableRow>\r\n          <TableCell colSpan={table.getVisibleLeafColumns().length} className=\"h-24 text-center\">\r\n            No results.\r\n          </TableCell>\r\n        </TableRow>\r\n      )}\r\n    </TableBody>\r\n  );\r\n}\r\n\r\nexport const DataTable = { Root, Toolbar, Pagination, Content, Header, Body };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/ui/group.tsx",
      "content": "import { cn } from \"@/lib/utils\";\r\nimport React from \"react\";\r\n\r\nexport interface GroupProps extends React.HTMLAttributes<HTMLDivElement> {}\r\n\r\nconst Group = React.forwardRef<HTMLDivElement, GroupProps>(\r\n  ({ className, children, ...props }, ref) => {\r\n    const childrenArray = React.Children.toArray(children);\r\n\r\n    return (\r\n      <div className={cn(\"inline-flex\", className)} ref={ref} {...props}>\r\n        {React.Children.map(childrenArray, (child, index) => {\r\n          if (React.isValidElement(child)) {\r\n            return React.cloneElement(child, {\r\n              className: cn(\r\n                child.props.className,\r\n                \"rounded-none border-r-0\",\r\n                index === 0 && \"rounded-l-md\",\r\n                index === childrenArray.length - 1 && \"rounded-r-md border-r\",\r\n                \"first:rounded-l-md last:rounded-r-md\"\r\n              ),\r\n            });\r\n          }\r\n          return child;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n);\r\nGroup.displayName = \"Group\";\r\n\r\nexport { Group };\r\n",
      "type": "registry:ui"
    }
  ]
}