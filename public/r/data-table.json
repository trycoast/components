{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:ui",
  "title": "Data Table",
  "description": "A tanstack-based data table.",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "dropdown-menu",
    "input",
    "label",
    "select",
    "table"
  ],
  "files": [
    {
      "path": "registry/default/ui/data-table.tsx",
      "content": "import * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Group } from \"@/registry/default/ui/group\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { ChevronFirst, ChevronLast, ChevronLeft, ChevronRight, Settings2 } from \"lucide-react\";\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  type SortingState,\n  type VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n  type Table as ReactTable,\n} from \"@tanstack/react-table\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TableContextValue<TData> {\n  table: ReactTable<TData>;\n  globalFilter: string;\n  config?: Config;\n  setGlobalFilter: (value: string) => void;\n}\n\nconst TableContext = React.createContext<TableContextValue<any> | undefined>(undefined);\n\nconst useTableContext = <TData,>(): TableContextValue<TData> => {\n  const context = React.useContext(TableContext);\n  if (!context) {\n    throw new Error(\"useTableContext must be used within a TableProvider\");\n  }\n  return context;\n};\n\nexport interface Config {\n  enableRowSelection?: boolean;\n  initialPageSize?: number;\n}\n\ninterface Meta {\n  disableDisplay?: boolean;\n}\n\nexport type ExtendedColumnDef<TData, TValue> = ColumnDef<TData, TValue> & {\n  meta?: Meta;\n};\n\nfunction Root<TData, TValue>({\n  columns,\n  data,\n  config,\n  children,\n  onRowSelectionChange,\n  ...props\n}: {\n  key?: string;\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n  config?: Config;\n  className?: string;\n  children?: React.ReactNode;\n  onRowSelectionChange?: (selectedRows: TData[]) => void;\n}) {\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>(() =>\n    props.key ? JSON.parse(localStorage.getItem(`${props.key}-columns`) || \"{}\") : {}\n  );\n  const [globalFilter, setGlobalFilter] = React.useState<string>(\"\");\n\n  React.useEffect(() => {\n    if (props.key) {\n      localStorage.setItem(`${props.key}-columns`, JSON.stringify(columnVisibility));\n    }\n  }, [columnVisibility]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      columnFilters,\n      globalFilter,\n    },\n    initialState: {\n      pagination: {\n        pageSize: config?.initialPageSize || 20,\n      },\n    },\n    enableRowSelection: true,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n  });\n\n  React.useEffect(() => {\n    if (onRowSelectionChange) {\n      requestIdleCallback(() => {\n        onRowSelectionChange(table.getSelectedRowModel().rows.map((row) => row.original));\n      });\n    }\n  }, [table.getState().rowSelection, onRowSelectionChange]);\n\n  return (\n    <TableContext.Provider value={{ table, config, globalFilter, setGlobalFilter }}>\n      <div className={cn(\"flex flex-col flex-1 overflow-hidden\", props.className)}>{children}</div>\n    </TableContext.Provider>\n  );\n}\n\nfunction useDebounce(value: string, delay: number) {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nfunction Toolbar({ className, children, search = true }: { className?: string; children?: React.ReactNode; search?: boolean }) {\n  const { table, globalFilter, setGlobalFilter } = useTableContext();\n  const [inputValue, setInputValue] = React.useState(globalFilter);\n\n  // Use a debounced value to update global filter\n  const debouncedValue = useDebounce(inputValue, 300);\n\n  React.useEffect(() => {\n    setGlobalFilter(debouncedValue);\n  }, [debouncedValue, setGlobalFilter]);\n\n  const handleInputChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  }, []);\n\n  return (\n    <div className={cn(\"flex justify-between\", className)}>\n      <div className=\"flex items-center w-full gap-1 mb-1\">\n        <div className=\"flex items-center\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"\" size=\"icon\">\n                <Settings2 size={15} />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {table\n                .getAllColumns()\n                .filter((column) => column.getCanHide())\n                .map((column) => (\n                  <DropdownMenuCheckboxItem key={column.id} checked={column.getIsVisible()} onCheckedChange={(value) => column.toggleVisibility(!!value)}>\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        {search && <Input placeholder=\"Search...\" className=\"max-w-xs\" value={inputValue} onChange={handleInputChange} />}\n      </div>\n      <div>{children}</div>\n    </div>\n  );\n}\n\nfunction Pagination({ className }: { className?: string }) {\n  const { table } = useTableContext();\n\n  return (\n    <div className={cn(\"flex items-center justify-between w-full gap-4 my-1\", className)}>\n      <div className=\"flex text-sm text-muted-foreground\">\n        {table.getFilteredSelectedRowModel().rows.length} of {new Intl.NumberFormat(\"en-US\").format(table.getFilteredRowModel().rows.length)} row(s) selected.\n      </div>\n      <div className=\"flex items-center gap-4\">\n        <div className=\"items-center hidden gap-2 lg:flex\">\n          <Label className=\"text-sm font-normal\">Rows per page</Label>\n          <Select value={`${table.getState().pagination.pageSize}`} onValueChange={(value) => table.setPageSize(Number(value))}>\n            <SelectTrigger className=\"w-20\" size=\"sm\">\n              <SelectValue placeholder={table.getState().pagination.pageSize.toString()} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <Group>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.setPageIndex(0)} disabled={!table.getCanPreviousPage()}>\n            <ChevronFirst size={15} />\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>\n            <ChevronLeft size={15} />\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"items-center w-20 text-xs font-semibold\" disabled>\n            Page {table.getState().pagination.pageIndex + 1}\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>\n            <ChevronRight size={15} />\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => table.setPageIndex(table.getPageCount() - 1)} disabled={!table.getCanNextPage()}>\n            <ChevronLast size={15} />\n          </Button>\n        </Group>\n      </div>\n    </div>\n  );\n}\n\nfunction Content({ children }: { children?: React.ReactNode }) {\n  return (\n    <div data-slot=\"table-container\" className=\"h-full overflow-y-auto\">\n      <table data-slot=\"table\" className=\"w-full text-sm caption-bottom\">\n        {children}\n      </table>\n    </div>\n  );\n}\n\nfunction Header({ className }: { className?: String }) {\n  const { table, config } = useTableContext();\n\n  return (\n    <TableHeader className={cn(\"sticky top-0\", className)}>\n      {table.getHeaderGroups().map((headerGroup) => (\n        <TableRow key={headerGroup.id}>\n          {config?.enableRowSelection && (\n            <TableHead>\n              <div className=\"flex items-center justify-center\">\n                <Checkbox\n                  checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && \"indeterminate\")}\n                  onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n                  aria-label=\"Select all\"\n                />\n              </div>\n            </TableHead>\n          )}\n          {headerGroup.headers.map((header) => {\n            const columnDef = header.column.columnDef as ExtendedColumnDef<unknown, unknown>;\n\n            if (columnDef.meta?.disableDisplay) {\n              return null;\n            }\n            return (\n              <TableHead key={header.id} className={header.isPlaceholder ? \"hidden\" : \"\"}>\n                {header.isPlaceholder ? null : flexRender(columnDef.header, header.getContext())}\n              </TableHead>\n            );\n          })}\n        </TableRow>\n      ))}\n    </TableHeader>\n  );\n}\n\nfunction Body() {\n  const { table, config } = useTableContext();\n\n  return (\n    <TableBody>\n      {table.getRowModel().rows.length > 0 ? (\n        table.getRowModel().rows.map((row) => (\n          <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n            {config?.enableRowSelection && (\n              <TableCell>\n                <div className=\"flex items-center justify-center\">\n                  <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label=\"Select row\" />\n                </div>\n              </TableCell>\n            )}\n            {row.getVisibleCells().map((cell) => {\n              const columnDef = cell.column.columnDef as ExtendedColumnDef<unknown, unknown>;\n\n              if (columnDef.meta?.disableDisplay) {\n                return null;\n              }\n              return <TableCell key={cell.id}>{flexRender(columnDef.cell, cell.getContext())}</TableCell>;\n            })}\n          </TableRow>\n        ))\n      ) : (\n        <TableRow>\n          <TableCell colSpan={table.getVisibleLeafColumns().length} className=\"h-24 text-center\">\n            No results.\n          </TableCell>\n        </TableRow>\n      )}\n    </TableBody>\n  );\n}\n\nexport const DataTable = { Root, Toolbar, Pagination, Content, Header, Body };\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/ui/group.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport React from \"react\";\n\nexport interface GroupProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst Group = React.forwardRef<HTMLDivElement, GroupProps>(\n  ({ className, children, ...props }, ref) => {\n    const childrenArray = React.Children.toArray(children);\n\n    return (\n      <div className={cn(\"inline-flex\", className)} ref={ref} {...props}>\n        {React.Children.map(childrenArray, (child, index) => {\n          if (React.isValidElement(child)) {\n            return React.cloneElement(child, {\n              className: cn(\n                child.props.className,\n                \"rounded-none border-r-0\",\n                index === 0 && \"rounded-l-md\",\n                index === childrenArray.length - 1 && \"rounded-r-md border-r\",\n                \"first:rounded-l-md last:rounded-r-md\"\n              ),\n            });\n          }\n          return child;\n        })}\n      </div>\n    );\n  }\n);\nGroup.displayName = \"Group\";\n\nexport { Group };\n",
      "type": "registry:ui"
    }
  ]
}