{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:ui",
  "title": "Modal",
  "description": "A modal",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "path": "registry/default/hooks/use-modal-manager.ts",
      "content": "import { useContext } from \"react\";\nimport { ModalProviderContext } from \"@/registry/default/providers/modal-provider\";\n\nexport default function useModalManager() {\n  const context = useContext(ModalProviderContext);\n\n  if (!context) {\n    throw new Error(\"useModalManager must be used within a ModalProvider\");\n  }\n\n  const { open, close } = context;\n\n  function register<Props>(Component: React.ComponentType<Props & { close: () => void }>) {\n    let currentId: symbol | null = null;\n\n    return {\n      open: (props: Props) => {\n        currentId = open(Component, props);\n      },\n      close: () => {\n        if (currentId) close(currentId);\n      },\n    };\n  }\n\n  return { register };\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/providers/modal-provider.tsx",
      "content": "import { createContext, useState, type ComponentType, type ReactNode, useCallback } from \"react\";\n\ntype ModalEntry<Props = any> = {\n  id: symbol;\n  component: ComponentType<Props & { close: () => void }>;\n  props: Props;\n};\n\nexport const ModalProviderContext = createContext<{\n  open: <P>(component: ComponentType<P & { close: () => void }>, props: P) => symbol;\n  close: (id: symbol) => void;\n  modals: ModalEntry[];\n} | null>(null);\n\nexport function ModalProvider({ children }: { children: ReactNode }) {\n  const [modals, setModals] = useState<ModalEntry[]>([]);\n\n  const open = useCallback(<P,>(component: ComponentType<P & { close: () => void }>, props: P) => {\n    const id = Symbol();\n    setModals((prev) => [...prev, { id, component, props }]);\n    return id;\n  }, []);\n\n  const close = useCallback((id: symbol) => {\n    setModals((prev) => prev.filter((m) => m.id !== id));\n  }, []);\n\n  return (\n    <ModalProviderContext.Provider value={{ open, close, modals }}>\n      {children}\n      {modals.map(({ component: Component, props, id }) => (\n        <Component key={id.toString()} {...props} close={() => close(id)} />\n      ))}\n    </ModalProviderContext.Provider>\n  );\n}\n",
      "type": "registry:lib",
      "target": "providers/modal-provider.tsx"
    },
    {
      "path": "registry/default/ui/modal.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport * as Dialog from \"@radix-ui/react-dialog\";\n\ntype ModalProps = {\n  className?: string;\n  children: React.ReactNode;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n};\n\nexport default function Modal({ className, children, open, onOpenChange }: ModalProps) {\n  return (\n    <Dialog.Root open={open} onOpenChange={onOpenChange}>\n      <Dialog.Portal>\n        <Dialog.Overlay\n          className={cn(\n            \"fixed inset-0 z-50 bg-black/50 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\"\n          )}\n        />\n        <Dialog.Title className=\"hidden\" />\n        <Dialog.Content\n          aria-labelledby={undefined}\n          aria-describedby={undefined}\n          className={cn(\n            \"fixed left-[50%] top-[50%] z-50 grid translate-x-[-50%] translate-y-[-50%] shadow-lg duration-200\",\n            \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n            \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n            \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n            className\n          )}\n        >\n          {children}\n        </Dialog.Content>\n      </Dialog.Portal>\n    </Dialog.Root>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}