{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-form",
  "type": "registry:component",
  "title": "Example Form",
  "description": "A contact form with Zod validation.",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "textarea",
    "card"
  ],
  "files": [
    {
      "path": "registry/default/blocks/example-form/example-form.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { Card, CardTitle, CardHeader, CardDescription, CardContent, CardFooter } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { z } from \"zod\";\r\n\r\nconst exampleFormSchema = z.object({\r\n  name: z.string().min(1),\r\n  email: z.string().email(),\r\n  message: z.string().min(1),\r\n});\r\n\r\nexport function ExampleForm() {\r\n  const [pending, setPending] = React.useState(false);\r\n  const [state, setState] = React.useState({\r\n    defaultValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n      message: \"\",\r\n    },\r\n    success: false,\r\n    errors: {\r\n      name: \"\",\r\n      email: \"\",\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleSubmit = React.useCallback(\r\n    (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      setPending(true);\r\n\r\n      const formData = new FormData(e.target as HTMLFormElement);\r\n      const data = Object.fromEntries(formData.entries());\r\n      const result = exampleFormSchema.safeParse(data);\r\n\r\n      if (!result.success) {\r\n        setState({\r\n          ...state,\r\n          errors: Object.fromEntries(Object.entries(result.error.flatten().fieldErrors).map(([key, value]) => [key, value?.[0] ?? \"\"])) as Record<\r\n            keyof typeof state.errors,\r\n            string\r\n          >,\r\n        });\r\n        setPending(false);\r\n        return;\r\n      }\r\n\r\n      setPending(false);\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"w-full max-w-sm\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>How can we help?</CardTitle>\r\n          <CardDescription>Need help with your project? We&apos;re here to assist you.</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex flex-col gap-6\">\r\n          <div className=\"group/field grid gap-2\" data-invalid={!!state.errors?.name}>\r\n            <Label htmlFor=\"name\" className=\"group-data-[invalid=true]/field:text-destructive\">\r\n              Name <span aria-hidden=\"true\">*</span>\r\n            </Label>\r\n            <Input\r\n              id=\"name\"\r\n              name=\"name\"\r\n              placeholder=\"Lee Robinson\"\r\n              className=\"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\"\r\n              disabled={pending}\r\n              aria-invalid={!!state.errors?.name}\r\n              aria-errormessage=\"error-name\"\r\n              defaultValue={state.defaultValues.name}\r\n            />\r\n            {state.errors?.name && (\r\n              <p id=\"error-name\" className=\"text-destructive text-sm\">\r\n                {state.errors.name}\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"group/field grid gap-2\" data-invalid={!!state.errors?.email}>\r\n            <Label htmlFor=\"email\" className=\"group-data-[invalid=true]/field:text-destructive\">\r\n              Email <span aria-hidden=\"true\">*</span>\r\n            </Label>\r\n            <Input\r\n              id=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"leerob@acme.com\"\r\n              className=\"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\"\r\n              disabled={pending}\r\n              aria-invalid={!!state.errors?.email}\r\n              aria-errormessage=\"error-email\"\r\n              defaultValue={state.defaultValues.email}\r\n            />\r\n            {state.errors?.email && (\r\n              <p id=\"error-email\" className=\"text-destructive text-sm\">\r\n                {state.errors.email}\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"group/field grid gap-2\" data-invalid={!!state.errors?.message}>\r\n            <Label htmlFor=\"message\" className=\"group-data-[invalid=true]/field:text-destructive\">\r\n              Message <span aria-hidden=\"true\">*</span>\r\n            </Label>\r\n            <Textarea\r\n              id=\"message\"\r\n              name=\"message\"\r\n              placeholder=\"Type your message here...\"\r\n              className=\"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\"\r\n              disabled={pending}\r\n              aria-invalid={!!state.errors?.message}\r\n              aria-errormessage=\"error-message\"\r\n              defaultValue={state.defaultValues.message}\r\n            />\r\n            {state.errors?.message && (\r\n              <p id=\"error-message\" className=\"text-destructive text-sm\">\r\n                {state.errors.message}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n        <CardFooter>\r\n          <Button type=\"submit\" size=\"sm\" disabled={pending}>\r\n            {pending ? \"Sending...\" : \"Send Message\"}\r\n          </Button>\r\n        </CardFooter>\r\n      </Card>\r\n    </form>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}