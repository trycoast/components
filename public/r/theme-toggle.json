{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-toggle",
  "type": "registry:ui",
  "title": "Theme Toggle",
  "description": "A toggle button for swapping between dark and light mode.",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/default/hooks/use-theme.ts",
      "content": "import { useContext } from \"react\";\nimport { ThemeProviderContext } from \"@/registry/default/providers/theme-provider\";\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n\n  return context;\n};\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/providers/theme-provider.tsx",
      "content": "import React, { createContext, useEffect, useState } from \"react\";\n\nexport type Theme = \"light\" | \"dark\" | \"system\";\n\nexport type ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nexport const ThemeProviderContext = createContext<ThemeProviderState | undefined>(undefined);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"ui-theme\",\n}: {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}) {\n  const [theme, setThemeState] = useState<Theme>(() => (localStorage.getItem(storageKey) as Theme) || defaultTheme);\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n\n    const appliedTheme = theme === \"system\" ? (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\") : theme;\n\n    root.classList.add(appliedTheme);\n  }, [theme]);\n\n  const setTheme = (theme: Theme) => {\n    localStorage.setItem(storageKey, theme);\n    setThemeState(theme);\n  };\n\n  return <ThemeProviderContext.Provider value={{ theme, setTheme }}>{children}</ThemeProviderContext.Provider>;\n}\n",
      "type": "registry:lib",
      "target": "providers/theme-provider.tsx"
    },
    {
      "path": "registry/default/ui/theme-toggle.tsx",
      "content": "import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/registry/default/hooks/use-theme\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  const toggle = () => {\n    if (theme === \"dark\") return setTheme(\"light\");\n    if (theme === \"light\") return setTheme(\"dark\");\n    setTheme(\"light\"); // fallback for 'system'\n  };\n\n  return (\n    <Button onClick={toggle} variant=\"outline\" size=\"icon\" aria-label=\"Toggle theme\">\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}