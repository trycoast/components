{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-select",
  "type": "registry:ui",
  "title": "Multi Select",
  "description": "A multi-select input component with combobox search and optional item creation callback.",
  "dependencies": [
    "@radix-ui/react-dialog",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "command",
    "popover",
    "separator"
  ],
  "files": [
    {
      "path": "registry/default/ui/multi-select.tsx",
      "content": "import { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandSeparator } from \"@/components/ui/command\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { CheckIcon, ChevronDown, XIcon } from \"lucide-react\";\r\nimport * as React from \"react\";\r\n\r\n/**\r\n * Variants for the multi-select component to handle different styles.\r\n * Uses class-variance-authority (cva) to define different styles based on \"variant\" prop.\r\n */\r\nconst multiSelectVariants = cva(\"m-1\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"border-foreground/10 text-foreground bg-card hover:bg-card/80\",\r\n      secondary: \"border-foreground/10 bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n      destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n      inverted: \"inverted\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n  },\r\n});\r\n\r\n/**\r\n * Props for MultiSelect component\r\n */\r\ninterface MultiSelectProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof multiSelectVariants> {\r\n  /**\r\n   * An array of option objects to be displayed in the multi-select component.\r\n   * Each option object has a label, value, and an optional icon.\r\n   */\r\n  options: {\r\n    /** The text to display for the option. */\r\n    label: string;\r\n    /** The unique value associated with the option. */\r\n    value: string;\r\n    /** Optional icon component to display alongside the option. */\r\n    icon?: React.ComponentType<{ className?: string }>;\r\n  }[];\r\n\r\n  /**\r\n   * Callback function triggered when the selected values change.\r\n   * Receives an array of the new selected values.\r\n   */\r\n  onValueChange: (value: string[]) => void;\r\n\r\n  /**\r\n   * Callback function triggered when a new value is created.\r\n   * Receives the newly created value as a string.\r\n   */\r\n  onCreate?: (value: string) => void;\r\n\r\n  /** The default selected values when the component mounts. */\r\n  defaultValue?: string[];\r\n\r\n  /**\r\n   * Placeholder text to be displayed when no values are selected.\r\n   * Optional, defaults to \"Select options\".\r\n   */\r\n  placeholder?: string;\r\n\r\n  /**\r\n   * Maximum number of items to display. Extra selected items will be summarized.\r\n   * Optional, defaults to 3.\r\n   */\r\n  maxCount?: number;\r\n\r\n  /**\r\n   * The modality of the popover. When set to true, interaction with outside elements\r\n   * will be disabled and only popover content will be visible to screen readers.\r\n   * Optional, defaults to false.\r\n   */\r\n  modalPopover?: boolean;\r\n\r\n  /**\r\n   * If true, renders the multi-select component as a child of another component.\r\n   * Optional, defaults to false.\r\n   */\r\n  asChild?: boolean;\r\n\r\n  /**\r\n   * Additional class names to apply custom styles to the multi-select component.\r\n   * Optional, can be used to add custom styles.\r\n   */\r\n  className?: string;\r\n}\r\n\r\nexport const MultiSelect = React.forwardRef<HTMLButtonElement, MultiSelectProps>(\r\n  (\r\n    {\r\n      options,\r\n      onValueChange,\r\n      onCreate,\r\n      variant,\r\n      defaultValue = [],\r\n      placeholder = \"Select options\",\r\n      maxCount = 3,\r\n      modalPopover = false,\r\n      asChild = false,\r\n      className,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const [selectedValues, setSelectedValues] = React.useState<string[]>(defaultValue);\r\n    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\r\n    const [inputValue, setInputValue] = React.useState(\"\");\r\n\r\n    const handleInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key === \"Enter\") {\r\n        setIsPopoverOpen(true);\r\n      } else if (event.key === \"Backspace\" && !event.currentTarget.value) {\r\n        const newSelectedValues = [...selectedValues];\r\n        newSelectedValues.pop();\r\n        setSelectedValues(newSelectedValues);\r\n        onValueChange(newSelectedValues);\r\n      }\r\n    };\r\n\r\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setInputValue(event.target.value);\r\n    };\r\n\r\n    const toggleOption = (option: string) => {\r\n      const newSelectedValues = selectedValues.includes(option) ? selectedValues.filter((value) => value !== option) : [...selectedValues, option];\r\n      setSelectedValues(newSelectedValues);\r\n      onValueChange(newSelectedValues);\r\n    };\r\n\r\n    const handleClear = () => {\r\n      setSelectedValues([]);\r\n      onValueChange([]);\r\n    };\r\n\r\n    const handleTogglePopover = () => {\r\n      setIsPopoverOpen((prev) => !prev);\r\n    };\r\n\r\n    const clearExtraOptions = () => {\r\n      const newSelectedValues = selectedValues.slice(0, maxCount);\r\n      setSelectedValues(newSelectedValues);\r\n      onValueChange(newSelectedValues);\r\n    };\r\n\r\n    const toggleAll = () => {\r\n      if (selectedValues.length === options.length) {\r\n        handleClear();\r\n      } else {\r\n        const allValues = options.map((option) => option.value);\r\n        setSelectedValues(allValues);\r\n        onValueChange(allValues);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen} modal={modalPopover}>\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            ref={ref}\r\n            {...props}\r\n            onClick={handleTogglePopover}\r\n            className={cn(\r\n              \"flex w-full p-1 rounded-md border min-h-10 h-auto items-center justify-between bg-inherit hover:bg-inherit [&_svg]:pointer-events-auto\",\r\n              className\r\n            )}\r\n          >\r\n            {selectedValues.length > 0 ? (\r\n              <div className=\"flex justify-between items-center w-full\">\r\n                <div className=\"flex flex-wrap items-center\">\r\n                  {selectedValues.slice(0, maxCount).map((value) => {\r\n                    const option = options.find((o) => o.value === value);\r\n                    const IconComponent = option?.icon;\r\n                    return (\r\n                      <Badge key={value} className={cn(multiSelectVariants({ variant }), \"rounded group hover:bg-foreground/10\")}>\r\n                        {IconComponent && <IconComponent className=\"h-4 w-4 mr-2\" />}\r\n                        {option?.label}\r\n                        <div className=\"w-0 invisible group-hover:w-4 transition-all duration-500 group-hover:visible flex items-center justify-end\">\r\n                          <Button\r\n                            size=\"icon\"\r\n                            variant={\"ghost\"}\r\n                            className=\"w-4 h-4 rounded-none\"\r\n                            onClick={(event) => {\r\n                              event.stopPropagation();\r\n                              toggleOption(value);\r\n                            }}\r\n                          >\r\n                            <XIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </Badge>\r\n                    );\r\n                  })}\r\n                  {selectedValues.length > maxCount && (\r\n                    <Badge\r\n                      className={cn(\"bg-transparent text-foreground border-foreground/1 hover:bg-transparent rounded group\", multiSelectVariants({ variant }))}\r\n                    >\r\n                      {`+ ${selectedValues.length - maxCount} more`}\r\n                      <div className=\"w-0 invisible group-hover:w-4 transition-all duration-500 group-hover:visible flex items-center justify-end\">\r\n                        <Button\r\n                          size=\"icon\"\r\n                          variant={\"ghost\"}\r\n                          className=\"w-4 h-4 rounded-none\"\r\n                          onClick={(event) => {\r\n                            event.stopPropagation();\r\n                            clearExtraOptions();\r\n                          }}\r\n                        >\r\n                          <XIcon />\r\n                        </Button>\r\n                      </div>\r\n                    </Badge>\r\n                  )}\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <XIcon\r\n                    className=\"h-4 mx-2 cursor-pointer text-muted-foreground\"\r\n                    onClick={(event) => {\r\n                      event.stopPropagation();\r\n                      handleClear();\r\n                    }}\r\n                  />\r\n                  <Separator orientation=\"vertical\" className=\"flex min-h-6 h-full\" />\r\n                  <ChevronDown className=\"h-4 mx-2 cursor-pointer text-muted-foreground\" />\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex items-center justify-between w-full mx-auto\">\r\n                <span className=\"text-sm text-muted-foreground mx-3\">{placeholder}</span>\r\n                <ChevronDown className=\"h-4 cursor-pointer text-muted-foreground mx-2\" />\r\n              </div>\r\n            )}\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"w-auto p-0\" align=\"start\" onEscapeKeyDown={() => setIsPopoverOpen(false)}>\r\n          <Command className=\"z-20\">\r\n            <CommandInput placeholder=\"Search...\" onKeyDown={handleInputKeyDown} onChangeCapture={handleInputChange} value={inputValue} />\r\n            <CommandList>\r\n              {onCreate ? (\r\n                <CommandEmpty className=\"py-6 text-center text-sm cursor-pointer\" onClick={() => onCreate(inputValue) && setInputValue(\"\")}>\r\n                  Create \"{inputValue}\"?\r\n                </CommandEmpty>\r\n              ) : (\r\n                <CommandEmpty>No results found.</CommandEmpty>\r\n              )}\r\n\r\n              <CommandGroup>\r\n                <CommandItem key=\"all\" onSelect={toggleAll} className=\"cursor-pointer justify-center\">\r\n                  <span className=\"text-foreground/50\">Select All</span>\r\n                </CommandItem>\r\n                {options.map((option) => {\r\n                  const isSelected = selectedValues.includes(option.value);\r\n                  return (\r\n                    <CommandItem key={option.value} onSelect={() => toggleOption(option.value)} className=\"cursor-pointer\">\r\n                      <div\r\n                        className={cn(\r\n                          \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\r\n                          isSelected ? \"bg-primary text-primary-foreground\" : \"opacity-50 [&_svg]:invisible\"\r\n                        )}\r\n                      >\r\n                        <CheckIcon className=\"h-4 w-4\" />\r\n                      </div>\r\n                      {option.icon && <option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />}\r\n                      <span>{option.label}</span>\r\n                    </CommandItem>\r\n                  );\r\n                })}\r\n              </CommandGroup>\r\n              <CommandSeparator />\r\n              <CommandGroup>\r\n                <div className=\"flex items-center justify-between\">\r\n                  {selectedValues.length > 0 && (\r\n                    <>\r\n                      <CommandItem onSelect={handleClear} className=\"flex-1 justify-center cursor-pointer\">\r\n                        Clear\r\n                      </CommandItem>\r\n                      <Separator orientation=\"vertical\" className=\"flex min-h-6 h-full\" />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </CommandGroup>\r\n            </CommandList>\r\n          </Command>\r\n        </PopoverContent>\r\n      </Popover>\r\n    );\r\n  }\r\n);\r\n\r\nMultiSelect.displayName = \"MultiSelect\";\r\n",
      "type": "registry:ui"
    }
  ]
}