{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-select",
  "type": "registry:ui",
  "title": "Multi Select",
  "description": "A multi-select input component with combobox search and optional item creation callback.",
  "dependencies": [
    "@radix-ui/react-dialog",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "command",
    "popover",
    "separator"
  ],
  "files": [
    {
      "path": "registry/default/ui/multi-select.tsx",
      "content": "import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandSeparator } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { CheckIcon, ChevronDown, XIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\n/**\n * Variants for the multi-select component to handle different styles.\n * Uses class-variance-authority (cva) to define different styles based on \"variant\" prop.\n */\nconst multiSelectVariants = cva(\"m-1\", {\n  variants: {\n    variant: {\n      default: \"border-foreground/10 text-foreground bg-card hover:bg-card/80\",\n      secondary: \"border-foreground/10 bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n      destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n      inverted: \"inverted\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\n/**\n * Props for MultiSelect component\n */\ninterface MultiSelectProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof multiSelectVariants> {\n  /**\n   * An array of option objects to be displayed in the multi-select component.\n   * Each option object has a label, value, and an optional icon.\n   */\n  options: {\n    /** The text to display for the option. */\n    label: string;\n    /** The unique value associated with the option. */\n    value: string;\n    /** Optional icon component to display alongside the option. */\n    icon?: React.ComponentType<{ className?: string }>;\n  }[];\n\n  /**\n   * Callback function triggered when the selected values change.\n   * Receives an array of the new selected values.\n   */\n  onValueChange: (value: string[]) => void;\n\n  /**\n   * Callback function triggered when a new value is created.\n   * Receives the newly created value as a string.\n   */\n  onCreate?: (value: string) => void;\n\n  /** The default selected values when the component mounts. */\n  defaultValue?: string[];\n\n  /**\n   * Placeholder text to be displayed when no values are selected.\n   * Optional, defaults to \"Select options\".\n   */\n  placeholder?: string;\n\n  /**\n   * Maximum number of items to display. Extra selected items will be summarized.\n   * Optional, defaults to 3.\n   */\n  maxCount?: number;\n\n  /**\n   * The modality of the popover. When set to true, interaction with outside elements\n   * will be disabled and only popover content will be visible to screen readers.\n   * Optional, defaults to false.\n   */\n  modalPopover?: boolean;\n\n  /**\n   * If true, renders the multi-select component as a child of another component.\n   * Optional, defaults to false.\n   */\n  asChild?: boolean;\n\n  /**\n   * Additional class names to apply custom styles to the multi-select component.\n   * Optional, can be used to add custom styles.\n   */\n  className?: string;\n}\n\nexport const MultiSelect = React.forwardRef<HTMLButtonElement, MultiSelectProps>(\n  (\n    {\n      options,\n      onValueChange,\n      onCreate,\n      variant,\n      defaultValue = [],\n      placeholder = \"Select options\",\n      maxCount = 3,\n      modalPopover = false,\n      asChild = false,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const [selectedValues, setSelectedValues] = React.useState<string[]>(defaultValue);\n    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n    const [inputValue, setInputValue] = React.useState(\"\");\n\n    const handleInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === \"Enter\") {\n        setIsPopoverOpen(true);\n      } else if (event.key === \"Backspace\" && !event.currentTarget.value) {\n        const newSelectedValues = [...selectedValues];\n        newSelectedValues.pop();\n        setSelectedValues(newSelectedValues);\n        onValueChange(newSelectedValues);\n      }\n    };\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setInputValue(event.target.value);\n    };\n\n    const toggleOption = (option: string) => {\n      const newSelectedValues = selectedValues.includes(option) ? selectedValues.filter((value) => value !== option) : [...selectedValues, option];\n      setSelectedValues(newSelectedValues);\n      onValueChange(newSelectedValues);\n    };\n\n    const handleClear = () => {\n      setSelectedValues([]);\n      onValueChange([]);\n    };\n\n    const handleTogglePopover = () => {\n      setIsPopoverOpen((prev) => !prev);\n    };\n\n    const clearExtraOptions = () => {\n      const newSelectedValues = selectedValues.slice(0, maxCount);\n      setSelectedValues(newSelectedValues);\n      onValueChange(newSelectedValues);\n    };\n\n    const toggleAll = () => {\n      if (selectedValues.length === options.length) {\n        handleClear();\n      } else {\n        const allValues = options.map((option) => option.value);\n        setSelectedValues(allValues);\n        onValueChange(allValues);\n      }\n    };\n\n    return (\n      <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen} modal={modalPopover}>\n        <PopoverTrigger asChild>\n          <Button\n            ref={ref}\n            {...props}\n            onClick={handleTogglePopover}\n            className={cn(\n              \"flex w-full p-1 rounded-md border min-h-10 h-auto items-center justify-between bg-inherit hover:bg-inherit [&_svg]:pointer-events-auto\",\n              className\n            )}\n          >\n            {selectedValues.length > 0 ? (\n              <div className=\"flex justify-between items-center w-full\">\n                <div className=\"flex flex-wrap items-center\">\n                  {selectedValues.slice(0, maxCount).map((value) => {\n                    const option = options.find((o) => o.value === value);\n                    const IconComponent = option?.icon;\n                    return (\n                      <Badge key={value} className={cn(multiSelectVariants({ variant }), \"rounded group hover:bg-foreground/10\")}>\n                        {IconComponent && <IconComponent className=\"h-4 w-4 mr-2\" />}\n                        {option?.label}\n                        <div className=\"w-0 invisible group-hover:w-4 transition-all duration-500 group-hover:visible flex items-center justify-end\">\n                          <Button\n                            size=\"icon\"\n                            variant={\"ghost\"}\n                            className=\"w-4 h-4 rounded-none\"\n                            onClick={(event) => {\n                              event.stopPropagation();\n                              toggleOption(value);\n                            }}\n                          >\n                            <XIcon />\n                          </Button>\n                        </div>\n                      </Badge>\n                    );\n                  })}\n                  {selectedValues.length > maxCount && (\n                    <Badge\n                      className={cn(\"bg-transparent text-foreground border-foreground/1 hover:bg-transparent rounded group\", multiSelectVariants({ variant }))}\n                    >\n                      {`+ ${selectedValues.length - maxCount} more`}\n                      <div className=\"w-0 invisible group-hover:w-4 transition-all duration-500 group-hover:visible flex items-center justify-end\">\n                        <Button\n                          size=\"icon\"\n                          variant={\"ghost\"}\n                          className=\"w-4 h-4 rounded-none\"\n                          onClick={(event) => {\n                            event.stopPropagation();\n                            clearExtraOptions();\n                          }}\n                        >\n                          <XIcon />\n                        </Button>\n                      </div>\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <XIcon\n                    className=\"h-4 mx-2 cursor-pointer text-muted-foreground\"\n                    onClick={(event) => {\n                      event.stopPropagation();\n                      handleClear();\n                    }}\n                  />\n                  <Separator orientation=\"vertical\" className=\"flex min-h-6 h-full\" />\n                  <ChevronDown className=\"h-4 mx-2 cursor-pointer text-muted-foreground\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-between w-full mx-auto\">\n                <span className=\"text-sm text-muted-foreground mx-3\">{placeholder}</span>\n                <ChevronDown className=\"h-4 cursor-pointer text-muted-foreground mx-2\" />\n              </div>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\" onEscapeKeyDown={() => setIsPopoverOpen(false)}>\n          <Command className=\"z-20\">\n            <CommandInput placeholder=\"Search...\" onKeyDown={handleInputKeyDown} onChangeCapture={handleInputChange} value={inputValue} />\n            <CommandList>\n              {onCreate ? (\n                <CommandEmpty className=\"py-6 text-center text-sm cursor-pointer\" onClick={() => onCreate(inputValue) && setInputValue(\"\")}>\n                  Create \"{inputValue}\"?\n                </CommandEmpty>\n              ) : (\n                <CommandEmpty>No results found.</CommandEmpty>\n              )}\n\n              <CommandGroup>\n                <CommandItem key=\"all\" onSelect={toggleAll} className=\"cursor-pointer justify-center\">\n                  <span className=\"text-foreground/50\">Select All</span>\n                </CommandItem>\n                {options.map((option) => {\n                  const isSelected = selectedValues.includes(option.value);\n                  return (\n                    <CommandItem key={option.value} onSelect={() => toggleOption(option.value)} className=\"cursor-pointer\">\n                      <div\n                        className={cn(\n                          \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n                          isSelected ? \"bg-primary text-primary-foreground\" : \"opacity-50 [&_svg]:invisible\"\n                        )}\n                      >\n                        <CheckIcon className=\"h-4 w-4\" />\n                      </div>\n                      {option.icon && <option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />}\n                      <span>{option.label}</span>\n                    </CommandItem>\n                  );\n                })}\n              </CommandGroup>\n              <CommandSeparator />\n              <CommandGroup>\n                <div className=\"flex items-center justify-between\">\n                  {selectedValues.length > 0 && (\n                    <>\n                      <CommandItem onSelect={handleClear} className=\"flex-1 justify-center cursor-pointer\">\n                        Clear\n                      </CommandItem>\n                      <Separator orientation=\"vertical\" className=\"flex min-h-6 h-full\" />\n                    </>\n                  )}\n                </div>\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n);\n\nMultiSelect.displayName = \"MultiSelect\";\n",
      "type": "registry:ui"
    }
  ]
}